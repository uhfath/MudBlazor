@namespace MudBlazor
@inherits MudComponentBase
@typeparam T
@using MudBlazor.Internal

<div class="@_containerClass" style="@Style">
    @foreach (var adornment in _startAdornments)
    {
        <MudInputAdornment Class="@(adornment.Class ?? GetAdornmentClassname(adornment))"
                           Style="@GetAdornmentStyle(adornment)"
                           Icon="@adornment.AdornmentIcon"
                           Color="adornment.AdornmentColor"
                           Size="adornment.AdornmentIconSize"
                           Text="@adornment.AdornmentText"
                           Edge="Edge.Start"
                           AdornmentClick="ReadOnly ? default : adornment.OnAdornmentClick"
                           ShowFocus="adornment.ShowFocus"
                           Disabled="Disabled"
                           AriaLabel="@adornment.AdornmentAriaLabel" />
    }

    @if (ChildContent == null)
    {
        if (AutoGrow || Lines > 1)
        {
            <textarea id="@InputElementId"
                      @ref="InputElementReference"
                      rows="@Lines"
                      class="@_inputClass"
                      value="@_currentValueText"
                      placeholder="@Placeholder"
                      disabled="@Disabled"
                      readonly="@ReadOnly"
                      inputmode="@_inputMode"
                      type="@_inputType"
                      maxlength="@MaxLength"
                      @onpaste="OnPasteInternal"
                      @oninput="OnInputInternal"
                      @onchange="OnChangeInternal"
                      @onfocus="OnFocusInternal"
                      @onblur="OnBlurInternal"
                      @onkeydown="OnKeyDownInternal"
                      @onkeyup="OnKeyUpInternal"
                      @onkeydown:preventDefault="KeyDownPreventDefault"
                      @onkeyup:preventDefault="KeyUpPreventDefault"
                      @onclick="OnClickInternal"
                      @attributes="UserAttributes" />
        }
        else
        {
            <input id="@InputElementId"
                   @ref="InputElementReference"
                   class="@_inputClass"
                   value="@_currentValueText"
                   placeholder="@Placeholder"
                   disabled="@Disabled"
                   readonly="@ReadOnly"
                   inputmode="@_inputMode"
                   type="@_inputType"
                   maxlength="@MaxLength"
                   @onpaste="OnPasteInternal"
                   @oninput="OnInputInternal"
                   @onchange="OnChangeInternal"
                   @onfocus="OnFocusInternal"
                   @onblur="OnBlurInternal"
                   @onkeydown="OnKeyDownInternal"
                   @onkeyup="OnKeyUpInternal"
                   @onkeydown:preventDefault="KeyDownPreventDefault"
                   @onkeyup:preventDefault="KeyUpPreventDefault"
                   @onclick="OnClickInternal"
                   @attributes="UserAttributes" />
        }
    }
    else
    {
        <div id="@InputElementId"
             @ref="InputElementReference"
             class="@_inputDivClass"
             tabindex="0"
             placeholder="@Placeholder"
             @onpaste="OnPasteInternal"
             @oninput="OnInputInternal"
             @onchange="OnChangeInternal"
             @onfocus="OnFocusInternal"
             @onblur="OnBlurInternal"
             @onkeydown="OnKeyDownInternal"
             @onkeyup="OnKeyUpInternal"
             @onkeydown:preventDefault="KeyDownPreventDefault"
             @onkeyup:preventDefault="KeyUpPreventDefault"
             @onclick="OnClickInternal"
             @attributes="UserAttributes">
             @ChildContent(Value)
        </div>
    }

    @if (_showClearIcon && !Disabled)
    {
        <MudIconButton tabindex="-1"
                       Class="@_clearButtonClass"
                       Style="margin-top: 4px"
                       Color="Color.Default"
                       Icon="@ClearIcon"
                       Size="Size.Small"
                       OnClick="OnClearButtonClickInternal" />
    }

    @foreach (var adornment in _endAdornments)
    {
        <MudInputAdornment Class="@(adornment.Class ?? GetAdornmentClassname(adornment))"
                           Style="@GetAdornmentStyle(adornment)"
                           Icon="@adornment.AdornmentIcon"
                           Color="adornment.AdornmentColor"
                           Size="adornment.AdornmentIconSize"
                           Text="@adornment.AdornmentText"
                           Edge="Edge.End"
                           Disabled="Disabled"
                           AdornmentClick="ReadOnly ? default : adornment.OnAdornmentClick"
                           ShowFocus="adornment.ShowFocus"
                           AriaLabel="@adornment.AdornmentAriaLabel" />
    }

	@if (Variant == Variant.Outlined)
	{
	    <div class="mud-input-outlined-border"></div>
	}

	@if (ShowSpinners && !Disabled && !ReadOnly)
	{
	    <div class="mud-input-numeric-spin">
            <MudButton Variant="Variant.Text" OnClick="OnSpinnerIncrement" tabindex="-1">
                <MudIcon Icon="@SpinnerUpIcon" Size="_spinnerButtonSize" />
            </MudButton>
            <MudButton Variant="Variant.Text" OnClick="OnSpinnerDecrement" tabindex="-1">
                <MudIcon Icon="@SpinnerDownIcon" Size="_spinnerButtonSize" />
            </MudButton>
        </div>
	}
</div>